apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: api
  labels:
    app: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
      annotations:      
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      imagePullSecrets:
      - name: docker-registry-secret
      containers:
#      - name: notebook-cpu
#        image: docker.io/pipelineai/notebook-cpu:1.5.0
#        resources:
#          limits:
#            memory: 2Gi
#            cpu: 2000m
#          requests:
#            memory: 2Gi
#            cpu: 2000m
#        imagePullPolicy: "Always"
#        terminationMessagePolicy: "FallbackToLogsOnError"
#        volumeMounts:
#        - name: users-volume
#          mountPath: /mnt/pipelineai/users
#        env:
#        # Note:  When adding vars here, make sure you whitelist them in jupyterhub_config.py
#        #        otherwise, jupyter notebooks won't be able to see them
#        - name: PIPELINE_USERS_HOME
#          value: /mnt/pipelineai/users
#        - name: SPARK_MASTER
#          value: k8s://https://kubernetes-api-server:6443
#        - name: SPARK_SUBMIT_ARGS
#          value: ""
#        - name: JUPYTERHUB_AUTHENTICATOR
#          value: dummyauthenticator.DummyAuthenticator
#        - name: AUTH0_SUBDOMAIN
#          value: ""
#        - name: OAUTH_CALLBACK_URL
#          value: ""
#        - name: OAUTH_CLIENT_ID
#          value: ""
#        - name: OAUTH_CLIENT_SECRET
#          value: ""
#        - name: GITHUB_OAUTH_CLIENT_ID
#          value: ""
#        - name: GITHUB_OAUTH_CLIENT_SECRET
#          value: ""
#        ports:
#        - containerPort: 6006
#        - containerPort: 8754
#        - containerPort: 8755
      - name: api
        image: docker.io/pipelineai/api:1.5.0
        imagePullPolicy: "Always"
        terminationMessagePolicy: "FallbackToLogsOnError"
        resources:
          limits:
            memory: 2Gi
            cpu: 1000m
          requests:
            memory: 2Gi
            cpu: 1000m
        ports:
        - containerPort: 8080
        - containerPort: 32000
        volumeMounts:
        - name: dockersocket
          mountPath: /var/run/docker.sock
        - name: users-volume
          mountPath: /mnt/pipelineai/users
        #   * command line arguments take precedence over all other config values
        #   * next environment variables are evaluated, env variable values should be set in:
        #         config/conda/activate.d/env_vars.sh
        #   * when neither of the two above are defined the default values defined in api_pipeline/.env are used
        env:
        - name: PIPELINE_API_REQUIRES_AUTH
          value: "True"
        - name: PIPELINE_API_BASE_PATH
          value: "/admin/api/c"
        - name: PIPELINE_API_HOME_ROUTE
          value: "/swagger"
        - name: PIPELINE_API_DEBUG
          value: "True"
        - name: PIPELINE_API_ENV
          value: "production"
        - name: PIPELINE_API_HOST
          value: "0.0.0.0"
        - name: PIPELINE_API_PORT
          value: "32000"
        - name: PIPELINE_API_SPEC_VERSION
          value: "v1"
        - name: PIPELINE_API_JAEGER_CONFIG_LOGGING
          value: "True"
        - name: PIPELINE_API_JAEGER_CONFIG_SAMPLER_TYPE
          value: "const"
        - name: PIPELINE_API_JAEGER_CONFIG_SAMPLER_PARAM
          value: "1"
        - name: PIPELINE_API_OAUTH_CONFIG_ALGORITHMS
          value: "RS256"
        - name: PIPELINE_API_OAUTH_CONFIG_AUTH_HOST
          value: "pipelineio.auth0.com" 
        - name: PIPELINE_API_OAUTH_CONFIG_AUTH_CALLBACK_URL
          value: "/callback"
        - name: PIPELINE_API_OAUTH_CONFIG_AUTH_SCOPE
          value: "openid profile email"
        - name: PIPELINE_API_OAUTH_CONFIG_AUTH_REDIRECT_URI
          value: "/swagger"
        - name: PIPELINE_API_SPEC_DESCRIPTION
          value: "PipelineAI v1 API Spec"
        - name: PIPELINE_API_SPEC_TITLE
          value: "API V1"
        - name: PIPELINE_API_SPEC_ENDPOINT
          value: "v1_spec"
        - name: PIPELINE_API_SPEC_ROUTE
          value: "/spec"
        - name: PIPELINE_API_SWAGGER_CONFIG_DESCRIPTION
          value: "PipelineAI REST API"
        - name: PIPELINE_API_SWAGGER_CONFIG_TITLE
          value: "REST API"
        - name: PIPELINE_API_SWAGGER_CONFIG_UIVERSION
          value: "3"
        - name: PIPELINE_API_SWAGGER_CONFIG_SCHEMES
          value: "[https]"
        - name: PIPELINE_API_SWAGGER_CONFIG_SPECS_ROUTE
          value: "/swagger"
        - name: PIPELINE_API_SWAGGER_CONFIG_STATIC_URL_PATH
          value: "/spec"
        - name: PIPELINE_NAMESPACE
          value: "{{ PIPELINE_NAMESPACE }}"
        - name: PIPELINE_REQUIRES_AUTH
          value: "True"
        - name: PIPELINE_ISTIO_MANUAL_INJECT
          value: "True"
        - name: PIPELINE_IMAGE_REGISTRY_USERNAME
          value: "{{ PIPELINE_IMAGE_REGISTRY_USERNAME }}"
        - name: PIPELINE_IMAGE_REGISTRY_PASSWORD
          value: "{{ PIPELINE_IMAGE_REGISTRY_PASSWORD }}"
        - name: PIPELINE_IMAGE_REGISTRY_URL
          value: "{{ PIPELINE_IMAGE_REGISTRY_URL }}"
        - name: PIPELINE_IMAGE_REGISTRY_REPO
          value: "pipelineai"
        - name: PIPELINE_KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-cp-kafka:9092"
        - name: PIPELINE_KAFKA_REST_PROXY_SERVER
          value: "http://kafka-cp-kafka-rest:8082"
        - name: PIPELINE_NOTEBOOKS_HOME
          value: /mnt/pipelineai/notebooks
        - name: PIPELINE_USERS_HOME
          value: /mnt/pipelineai/users
        securityContext:
          privileged: true
      - name: mlflow
        image: docker.io/pipelineai/mlflow:1.5.0
        imagePullPolicy: "Always"
        terminationMessagePolicy: "FallbackToLogsOnError"
        resources:
          limits:
            memory: 2Gi
            cpu: 2000m
          requests:
            memory: 2Gi
            cpu: 2000m
        ports:
        - containerPort: 5000
        volumeMounts:
        - name: users-volume
          mountPath: /mnt/pipelineai/users
      volumes:
      - name: dockersocket
        hostPath:
          path: /var/run/docker.sock
      - name: users-volume 
        persistentVolumeClaim: 
          claimName: users-pvc
#      - name: users-volume
#        flexVolume:
#          driver: ceph.rook.io/rook
#          fsType: ceph
#          options:
#            fsName: pipelineai-fs # name of the filesystem specified in the filesystem CRD.
#            clusterNamespace: {{ PIPELINE_NAMESPACE }} # namespace where the Rook cluster is deployed
#            # by default the path is /, but you can override and mount a specific path of the filesystem by using the path attribute
#            # the path must exist on the filesystem, otherwise mounting the filesystem at that path will fail
#            path: users/
